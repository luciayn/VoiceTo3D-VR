from qwen_model import qwen_model

async def divide_tasks(question):
    """
    Divide the user's question into smaller tasks.
    Args:
        question (str): The user's question.
    Returns:
        list: A list of tasks.
    """
    prompt = f''' You are an AI assistant designed to help users break down complex questions into manageable tasks to execute in Javascript and implement in a VR environment. Your goal is to analyze the user's question and provide a clear, structured list of tasks that can be addressed independently.
    When responding, please keep the following points in mind:
    - Ensure that each task is specific, actionable, and can be completed without needing to refer to the original question.
    - If the question is ambiguous or contains multiple parts, break it down into separate tasks that can be addressed one at a time.
    - If the question is straightforward, you may return a single task.
    - If the question is complex, aim to break it down into 2-3 distinct tasks.
    - If the question is about a process or a series of steps, outline those steps clearly and logically.
    - If the question involves creating or manipulating more than 1 object, create separate tasks for each object.
    - Use clear and concise language to ensure that the tasks are easily understood.
    - Respond only with the list of tasks, without any additional commentary or explanation.

    Here's an example of how to format your response:
    [Description of the first task, Description of the second task, Description of the third task]

    Here's an example that involves more than 1 object:
    "Place 2 chairs around the table"
    The tasks for this question would be:
    [Place 1 chair around the table, Place 1 chair around the table]
    
    Here's an example of a complex question:
    "Create a table and put it on the floor"
    The tasks for this question would be:
    [Create a table on the floor]
    
    Here's an ambiguous example of a question:
    "Place that over there."
    The tasks for this question would be:
    ["Place that over there."]

    The user's question is:
    {question}'''
    messages = [
        {"role": "system", "content": "You are an AI assistant designed to help users break down complex questions into manageable tasks in a VR environment."},
        {"role": "user", "content": prompt}
    ]
    response = await qwen_model(messages)
    tasks = [task.strip() for task in response.strip("[]").split(",")]
    return tasks


async def reviewer_tasks(question, tasks):
    """
    Review the tasks generated by the divide_tasks function. It checks if the tasks are clear, actionable, and can be executed in a VR environment.
    Args:
        question (str): The user's question.
        tasks (list): The list of tasks generated by the divide_tasks function.
    Returns:
        str: "positive" if the tasks are clear and actionable, "negative" otherwise.
    """
    prompt = f'''You are an AI assistant designed to review tasks generated from a user's question. Your goal is to ensure that the tasks are clear and contain all the steps needed to solve the user's question in a VR environment.
    
    The user's question is:
    {question}
    
    The generated tasks are:
    {tasks}
    
    Please review the tasks and provide feedback on their clarity and if they contain all the steps needed for solving the user's question in a VR environment. 
    The tasks do not need to include the implementation details, just the high-level steps needed to achieve the user's question in a VR environment.
    If any task is unclear, suggest improvements or alternatives.
    If there is any task missing, return a negative feedback.
    Take into account that the tasks do not need to contain the objects' details, such as size or material.
    Take into account that the tasks do not need to specify the exact position of the objects, just their relative position to the user or other objects.
    Take into account the 3D space is assumed.
    Respond only with your feedback, i.e. positive or negative, without any additional commentary or explanation.'''
    
    messages = [
        {"role": "system", "content": "You are an AI assistant designed to review tasks generated from a user's question."},
        {"role": "user", "content": prompt}
    ]
    
    feedback = await qwen_model(messages)
    return feedback.strip()